Title: Creating the "perfect" password
Date Written: Fri Dec 23, 2022
Revised(Uploaded): Fri Dec 23, 2022
Estimated reading time: 10 minutes
keywords:password, bits-of-entropy, password-manager, 2FA, security, hashing

Creating reliable passwords has always beeen a challenging and unnecessarily confusing task. Is this password 
long enough? Can I remember this? Is it "random" enough? Should I reuse this "perfect" password everywhere?
Crafting a trully competent password is a balace between creativity and protocol. Ideally; security, privacy,
and convenience should be attained with an optimal password. But there are compromises when creating unique and 
memorable passwords. In this guide I will explain what it takes to make potentially impregnable passwords, and 
how to store them. 

Top 10 most common passwords:

123456
123456789
Qwerty
Password
12345
12345678
111111
1234567
123123
Qwerty123

source: https://www.rd.com/article/passwords-hackers-guess-first/

The strength of a password is essentially the probability for a password to be guessed within a reasonable amount 
of time. The metric for measuring the complexity and efficiency of a password is it's bit-entropy. In the context 
of computer security, entropy refers to the randomness or unpredictability of a password. The more random and 
unpredictable a password is, the higher its entropy. One way to measure the entropy of a password is in bits. A 
password with 1 bit of entropy has only two possible combinations (for example, "password" and "password1"). A 
password with 2 bits of entropy has four possible combinations (such as "password", "password1", "password2", and
"password3"). Each additional bit of entropy doubles the number of possible combinations. In general, longer passwords 
tend to have higher entropy than shorter passwords.

For example, a password with 8 bits of entropy has 256 possible combinations (2 to the power of 8), while a 
password with 16 bits of entropy has 65,536 possible combinations. This means that it would be significantly 
harder for an attacker to guess a password with 8 bits of entropy than one with 16 bits of entropy.The higher 
the number of bits of entropy, the stronger and more secure the password is considered to be. In general, it is 
recommended to use passwords with at least 12 bits of entropy in order to provide a reasonable level of security. 
This can be achieved by using a combination of upper and lower case letters, numbers, and special characters, and 
making the password long enough to increase the number of possible combinations.

A password that has never been used before will generally have higher entropy than a password that has been used 
by many people or that is based on a common phrase or pattern. A relatively longer but common string
of characters (ex: 'longLiveDaQueen') will have a relatively equivalent bit-entropy to a shorter string with a more random 
assembly of characters. Avoid using common dictionary terms and personally identifying information because hackers may 
try to socially engineer or collect as much information about their target as they can from their targets online presence.

Creating a password:
 A helpful trick is to create an acronym from a sentence:  “Deep down in Louisiana close to New Orleans,
 Way back up in the woods among the evergreens” becomes "$dDiLcTnO,wBuItW@Te", fulfilling the length and character 
 criteria for a stronger password. Passwords of this complexity and length would take quintillions of years to crack!

Maintenance:
It is commonly recommended for users to update their passwords frequently as well, usually every 6 months to a year.
It is important establish 2FA whenever possible to add an extra layer of security. It barely takes any time for 
setting up and and ensures that the entity attempting to log-in already has access to device(s) and/or services
(e-mail, biometrics, hardware tokens, etc.) that would only be available to a credible source. 

Remembering passwords:
A password manager can help you store a personal encrypted database of unique passwords. Some even have the ability of
creating custom pseudo-random passwords, analyze your passwords entropy, data breach monitoring, etc. I recommended
using KeePassXC for it's advanced feature-rich tools, cross platform compatability, ease of use, and non-cloud based 
nature. Besides, it's free! I recommend making a master password, a string combination of symbols, numbers, mixed-case 
letters which is atleast 12 characters long and is easy to memorize. This will serve as the key used for accessing all 
your other passwords stored in your exclusively local repository.

Peace of mind:
Some (good) companies will put in the effort of encrypting their clients login credentials. Robust measures are 
employed for securely utilizing and handling passwords.Hashing algorithms take in a users password of arbitrary 
length and returns a string of seemingly unintelligible information at a fixed length. This value is intended to 
be entirely unique given a specific input string. Some common hashing algorithms include MD5, SHA-1, SHA-2, NTLM, 
and LANMAN. The most popular hash algorithm as of the writting of this article is SHA-256, which returns a hash 
value  of 256-bits, or 64 hexadecimal digits. These hashes are almost impossible to crack given what I've discussed
in this article was implemented.

Conclusion: Now go create your own password and remember to never share it with anyone, not even your dog. Feel free to 
use uncommon unicode characters (printable non-ASCII) in your passwords and keep a personal copy of your database on a 
flashdrive if possible. You can now soundly go to sleep with some more peace of mind.

Tools:
You can check the strength of your passwords in websites like https://www.security.org/how-secure-is-my-password/
Create a free pseudo-random password: https://www.grc.com/passwords.htm
Best free password manager: https://keepassxc.org/

Terminology:

phishing n.: Type of social engineering where an attacker sends a fraudulent message designed to trick a person into 
revealing sensitive information to the attacker or to deploy malicious software on the victim's infrastructure like 
ransomware.

salting n.: technique of appending randomly generated numeric string before 'encrypting' the input contents
with a hashing function/algorithm

Two-factor authentication (2FA) n.: Security measure that helps to protect against unauthorized access to accounts 
and devices. It adds an extra layer of security by requiring users to provide two forms of authentication, rather 
than just a single password.

cryptographic hash function (CHF) n.: one-way deterministic mathematical process that "garbles" data and makes it 
unreadable. It is collision resistant, which means it is difficult to find two different inputs that produce the 
same hash value (known as a collision).

SHA-256 n.: Advanced encryption standard which has a digest/hash length of 256 bits (32-byte) and is practically 
unbreakable via brute force and our current computing capabilities. It is the most secure and robust encryption 
standard that is commercially available today.

pseudo-random number generator (PRNG) n.:
Deterministic algorithm for generating a sequence of numbers (given a seed) whose properties approximate the 
properties of sequences of random numbers. PRNG's are particualarly useful in practice because of the speed and 
reproducibility. We use the to simulate random events, but it is possible to correctly reconstruct the encryption 
process if the seed and algorithm are known. Truly random numbers can be generated using physical processes, such 
as radioactive decay or atmospheric noise, but these methods are expensive and time-consuming.

Note*
Encryption is not the same thing as hashing. Plaintext (readable Data) is  modified with a  key for 
encryption/decryption. This implies that the process is reversible and the original data can be recovered. The
hashing process is a one way process, this makes the protocol great at ensuring the integrity of data and 
storing passwords.

References: https://www.youtube.com/watch?v=BiStxSaLs7U&list=PLh3ksibDxVnUtm-z3lqNWl7llfT_zYIyq&index=1
            https://www.wikiwand.com/en/Cryptographic_hash_function
            https://www.youtube.com/watch?v=3NjQ9b3pgIg&list=PLh3ksibDxVnUtm-z3lqNWl7llfT_zYIyq&index=3
            https://databasic.io/en/wordcounter/#paste




